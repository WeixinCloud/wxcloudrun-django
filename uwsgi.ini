# 注意: ini文件只是代替命令行参数, 且通过ini文件启动uwsgi无法在终端获得错误信息,
# 强烈建议在出现错误时使用命令行参数而非ini文件启动uwsgi.
[uwsgi]
project = wxcloudrun

# alpine的包管理器apk安装的uwsgi是最小化程序, 许多插件并未默认加载.
# Dockerfile中apk add uwsgi-python3, 并在此处添加plugin参数.
plugin = python3

# 找到./%(project)目录下的wsgi文件(wsgi.py), 并以application为入口.
module = %(project).wsgi:application
# 在当前目录下生成socket文件, 用于与nginx通信.
socket = %(project).sock
# 一般用户对于socket文件只可读不可写.
chmod-socket = 664
# 使nginx对socket有读写权限.
chown-socket = nginx

master = true
processes = 4
threads = 2

# uwsgi进程的pid存储在该文件中.
pidfile = ./logs/uwsgi.pid
# 查看该日志文件是检查bug的最好方式.
daemonize = ./logs/uwsgi.log

# 服务停止时, 自动移除unix socket和pid文件.
vacuum = true
# 为每个工作进程设置请求数的上限. 当处理的请求总数超过这个量, 进程回收重启.
max-requests = 5000
# 设置一个请求的超时时间(秒), 如果一个请求超过了这个时间, 则请求被丢弃.
harakiri = 60
# uWsgi默认的buffersize为4096, 如果请求数据超过这个量会报错. 这里设置为64k.
buffer-size =  65536
# 如果http请求体的大小超过指定的限制, 打开http body缓冲, 这里为64k.
post-buffering = 65536
# 当一个请求被harakiri杀掉, 会输出一条日志.
harakiri-verbose = true
# 开启内存使用情况报告.
memory-report = true
# 设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒).
reload-mercy = 10
# 设置工作进程使用虚拟内存超过多少MB就回收重启.
reload-on-as =  1024
